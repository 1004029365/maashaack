/*  Version: MPL 1.1/GPL 2.0/LGPL 2.1   The contents of this file are subject to the Mozilla Public License Version  1.1 (the "License"); you may not use this file except in compliance with  the License. You may obtain a copy of the License at  http://www.mozilla.org/MPL/    Software distributed under the License is distributed on an "AS IS" basis,  WITHOUT WARRANTY OF ANY KIND, either express or impliechild. See the License  for the specific language governing rights and limitations under the  License.    The Original Code is [maashaack framework].    The Initial Developers of the Original Code are  Zwetan Kjukov <zwetan@gmail.com> and Marc Alcaraz <ekameleon@gmail.com>.  Portions created by the Initial Developers are Copyright (C) 2006-2011  the Initial Developers. All Rights Reserved.    Contributor(s):    Alternatively, the contents of this file may be used under the terms of  either the GNU General Public License Version 2 or later (the "GPL"), or  the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),  in which case the provisions of the GPL or the LGPL are applicable instead  of those above. If you wish to allow use of your version of this file only  under the terms of either the GPL or the LGPL, and not to allow others to  use your version of this file under the terms of the MPL, indicate your  decision by deleting the provisions above and replace them with the notice  and other provisions required by the LGPL or the GPL. If you do not delete  the provisions above, a recipient may use your version of this file under  the terms of any one of the MPL, the GPL or the LGPL.*/package graphics.layouts {    import core.maths.replaceNaN;        import graphics.Align;    import graphics.Direction;    import graphics.DirectionOrder;    import graphics.Directionable;    import graphics.geom.EdgeMetrics;    import flash.display.DisplayObject;    import flash.display.DisplayObjectContainer;    import flash.geom.Point;        /**     * A Box layout lays out all children of a specific DisplayObjectContainer in a single vertical column or a single horizontal row.      * The direction property determines whether to use vertical (default) or horizontal layout.     * <p><b>Example :</b></p>     * <pre class="prettyprint">     * import graphics.layouts.BoxLayout ;     * import graphics.layouts.LayoutBufferMode ;     *      * import graphics.Direction ;     * import graphics.geom.EdgeMetrics ;     *      * import flash.display.Graphics ;     * import flash.display.Sprite ;     * import flash.text.TextField ;     * import flash.text.TextFormat ;     *      * /////     *      * stage.scaleMode = "noScale" ;     *      * ////////     *      * var createChild:Function = function( i:int = 0 ):Sprite     * {     *     var child:Sprite = new Sprite() ;     *          *     child.name = "child" + i ;     *      *     child.mouseChildren = false ;     *          *     child.graphics.beginFill( 0xA2A2A2, 0.4 ) ;     *     child.graphics.drawRect(0,0,100,40) ;     *          *     var field:TextField = new TextField() ;     *          *     field.defaultTextFormat = new TextFormat( "Verdana" , 12 , 0xFFFFFF ) ;     *     field.x                 = 1 ;     *     field.y                 = 2 ;     *     field.width             = child.width - 2;     *     field.height            = child.height - 4 ;     *     field.text              = "child " + (i+1) ;     *          *     child.addChild( field ) ;     *          *     return child ;     * }     *      * /////     *      * var background:Sprite = new Sprite() ;     *      * background.x = 25 ;     * background.y = 25 ;     *      * addChild( background ) ;     *      * /////     *      * var container:Sprite = new Sprite() ;     *      * container.x = 25 ;     * container.y = 25 ;     *      * addChild( container ) ;     *      * /////     *      * var update:Function = function( layout:BoxLayout ):void     * {     *     var bounds:Rectangle = layout.bounds ;     *     var canvas:Graphics  = background.graphics ;     *     canvas.clear() ;     *     canvas.beginFill( 0, 0xFF0000 ) ;     *     canvas.drawRect( bounds.x , bounds.y , bounds.width , bounds.height ) ;     * }     *      * /////     *      * var loop:uint = 8 ;     *      * for( var i:int ; i<loop ; i++ )     * {     *     container.addChild( createChild( i ) ) ;     * }     *      * /////     *      * var layout:BoxLayout = new BoxLayout() ;     *      * layout.updater.connect( update ) ;     *      * layout.bufferMode = LayoutBufferMode.NORMAL ;     *      * layout.initialize( container ) ;     *      * layout.childCount     = 8 ;     * layout.padding        = new EdgeMetrics( 4 , 4 , 4 , 4 ) ;     * layout.direction      = Direction.VERTICAL ;     * layout.horizontalGap  = 4 ;     * layout.verticalGap    = 4 ;     *      * layout.run() ;     * </pre>     */    public class BoxLayout extends LayoutContainer implements Directionable    {        /**         * Creates a new BoxLayout instance.         * @param container The container to layout.         * @param init An object that contains properties with which to populate the newly layout object. If init is not an object, it is ignored.         */        public function BoxLayout( container:DisplayObjectContainer = null , init:Object = null )        {            super( container , init  ) ;        }                /**         * Determinates the number of childs visible in this layout to calculates size with the measure method.          * If this value is -1 all childs are used to calculate the visible area size else only the number of childs defines with the childCount attribute.         */        public function get childCount():int         {            return _childCount ;        }                /**         * @private         */        public function set childCount( value:int ):void         {            _childCount = ( value > -1 ) ? value : -1 ;        }                /**         * Indicates the direction value of this layout ("horizontal" or "vertical").         * @see graphics.Direction         */        public function get direction():String        {            return _direction ;        }                /**         * @private         */        public function set direction(value:String):void        {            _direction = value == Direction.HORIZONTAL ? Direction.HORIZONTAL : Direction.VERTICAL ;        }                /**         * Number of pixels between children in the horizontal direction.          * The default value depends on the component class; if not overriden for the class, the default value is 0.         */        public function get horizontalGap():Number        {            return _horizontalGap ;        }                /**         * @private         */        public function set horizontalGap( value:Number ):void        {            _horizontalGap = isNaN(value) ? 0 : value ;        }                /**         * Indicates the direction order of to layout all children in the container.          * This property can be define with the two constants DirectionOrder.NORMAL and DirectionOrder.REVERSE.         * @see graphics.DirectionOrder         */        public function get order():String        {            return _order ;        }                /**         * @private         */        public function set order( value:String ):void        {            _order = ( value == DirectionOrder.REVERSE ) ? DirectionOrder.REVERSE : DirectionOrder.NORMAL ;        }                /**         * Specifies the thickness, in pixels, of the four edge regions around the box layout.         */        public function get padding():EdgeMetrics        {            return _padding ;        }                /**         * @private         */        public function set padding( em:EdgeMetrics ):void        {            _padding = em || new EdgeMetrics() ;        }                /**         * The height property name use in the container to layout all items.         */        public var propHeight:String = "height" ;                /**         * The x property name use in the container to layout all items.         */        public const propX:String = "x" ;                /**         * The y property name use in the container to layout all items.         */        public const propY:String = "y" ;                /**         * The width property name use in the container to layout all items.         */        public var propWidth:String = "width" ;                /**         * Number of pixels between children in the vertical direction.          * The default value depends on the component class; if not overriden for the class, the default value is 0.         */        public function get verticalGap():Number        {            return _verticalGap ;        }                /**         * @private         */        public function set verticalGap( value:Number ):void        {            _verticalGap = isNaN(value) ? 0 : value ;        }                /**         * Returns the child position with the specified index and the current direction of this layout.         * @return the child position with the specified index and the current direction of this layout.         */        public function getChildPositionAt( index:Number ):Point         {            if( index < 0 || index >= _children.length )            {                throw new RangeError( this + " getChildPositionAt failed, the index does not exist in the child list." ) ;            }            var child:DisplayObject = getChildAt( index ) ;            return new Point( child.x , child.y ) ;        }                /**         * Returns the string representation of the coordinate attribute used in this display with the current direction value.         * @return the string representation of the coordinate attribute used in this display with the current direction value.         */        public function getCoordinateProperty():String         {            return _direction == Direction.VERTICAL ? propY : propX ;        }                /**         * Returns the string representation of the size attribute with the current direction.         * @return the string representation of the size attribute with the current direction.         */        public function getSizeProperty():String         {            return _direction == Direction.VERTICAL ? propHeight : propWidth ;        }                /**         * Indicates if the layout is horizontal.         */        public function isHorizontal():Boolean        {            return _direction == Direction.HORIZONTAL ;        }                /**         * Indicates if the layout is vertical.         */        public function isVertical():Boolean        {            return _direction == Direction.VERTICAL ;        }                /**         * Calculates the default sizes and minimum and maximum values.          * If the Box layout's direction property is set to Direction.HORIZONTAL,          * its measuredWidth property is equal to the sum of default widths of all of the children in the container, plus the thickness of the borders (padding), plus the left and right padding, plus the horizontal gap between each child. The value of the measuredHeight property is the maximum of all the children's default heights, plus room for the borders and padding.          * If the Box layout's direction property is set to Direction.VERTICAL, these two values are reversed.         */        public override function measure():void        {            _bounds.setEmpty() ;            var len:uint = _children.length ;            if ( len > 0 )            {                var i:int ;                var n:int ;                                var n1:Number = 0 ;                var n2:Number = 0 ;                                const hor:Boolean = direction == Direction.HORIZONTAL ;                                const p:String   = hor ? propWidth  : propHeight ;                const f:String   = hor ? propHeight : propWidth  ;                const gap:Number = hor ? _horizontalGap : _verticalGap ;                                 n = (_childCount > -1) ? Math.min(_childCount,len) : len ;                                 for ( i = 0 ; i<n ; i++)                 {                     n1 += _children[i].child[p] + gap ;                }                n1 -= gap ;                                n = len ;                for ( i = 0  ; i < n ; i++)                 {                    n2 = Math.max(_children[i].child[f], n2) ;                }                                _bounds.width  = ( hor ? n1 : n2 ) + replaceNaN( _padding.horizontal ) ;                 _bounds.height = ( hor ? n2 : n1 ) + replaceNaN( _padding.vertical   ) ;                                if (_align == Align.CENTER)                 {                    _bounds.x -= _bounds.width  / 2 ;                    _bounds.y -= _bounds.height / 2 ;                }                else if ( _align == Align.BOTTOM )                 {                    _bounds.x -= _bounds.width  / 2 ;                    _bounds.y -= _bounds.height ;                }                else if ( _align == Align.BOTTOM_LEFT )                 {                    _bounds.y -= _bounds.height ;                }                else if (_align == Align.BOTTOM_RIGHT)                 {                    _bounds.x -= _bounds.width  ;                    _bounds.y -= _bounds.height ;                }                else if (_align == Align.LEFT)                 {                    _bounds.y -= _bounds.height / 2 ;                }                else if (_align ==  Align.RIGHT)                 {                    _bounds.x -= _bounds.width  ;                    _bounds.y -= _bounds.height / 2 ;                }                else if (_align == Align.TOP)                 {                    _bounds.x -= _bounds.width / 2 ;                }                else if (_align == Align.TOP_RIGHT)                 {                    _bounds.x -= _bounds.width ;                }                else // TOP_LEFT                {                    // nothing                }            }        }                /**         * Render the layout, refresh and change the position of all childs in a specific container.         */        public override function render():void        {            if ( _children.length > 0 )            {                if ( _order == DirectionOrder.REVERSE )                {                    _children.reverse() ;                }                                const hor:Boolean = _direction == Direction.HORIZONTAL ;                const gap:Number  = hor ? _horizontalGap :  _verticalGap ;                                const left:Number = replaceNaN(_padding.left) ;                const top:Number  = replaceNaN(_padding.top) ;                                const pro:String  = hor ? propX : propY ;                const siz:String  = hor ? propWidth : propHeight ;                const inv:String  = (pro == propY) ? propX : propY ;                const tpr:String  = "t" + pro ;                const tin:String  = "t" + inv ;                                var prev:LayoutEntry ;                                for each ( var entry:LayoutEntry in _children )                 {                    entry[tpr] = prev ? (prev[tpr] +  prev.child[siz] + gap) : ( hor ? left : top ) ;                    entry[tin] = hor ? top : left ;                    prev       = entry ;                }                                if ( _order == DirectionOrder.REVERSE )                {                    _children.reverse() ;                }                                arrange() ;                                _renderer.emit( this ) ;            }        }                /**         * This method is invoked when the rendering is finished to finalize the it after the measure invokation.         */        public override function update():void        {            if ( _children.length > 0 )            {                var child:DisplayObject ;                for each( var entry:LayoutEntry in _children )                {                    child   = entry.child ;                    child.x = entry.x = entry.tx ;                     child.y = entry.y = entry.ty ;                }                _updater.emit( this ) ;            }            notifyFinished() ;        }                /**         * @private         */        protected var _childCount:int = -1 ;                /**         * @private         */        protected var _direction:String = Direction.VERTICAL ;                /**         * @private         */        protected var _horizontalGap:Number = 0 ;                /**         * @private         */        protected var _index:uint ;                /**         * @private         */        protected var _order:String = DirectionOrder.NORMAL ;                /**         * @private         */        protected var _padding:EdgeMetrics = new EdgeMetrics() ;                /**         * @private         */        protected var _verticalGap:Number = 0 ;                /**         * @private         */        protected function arrange():void        {            if( _children.length > 0 )            {                for each (  var entry:LayoutEntry in _children )                 {                    if( _align == Align.CENTER )                    {                        entry.tx -= _bounds.width  * .5 ;                        entry.ty -= _bounds.height * .5 ;                    }                    else if ( _align == Align.BOTTOM )                    {                        entry.tx -= _bounds.width * .5 ;                        entry.ty -= _bounds.height ;                    }                    else if( _align == Align.BOTTOM_LEFT )                    {                        entry.ty -= _bounds.height ;                    }                    else if( _align == Align.BOTTOM_RIGHT )                    {                        entry.tx -= _bounds.width  ;                        entry.ty -= _bounds.height ;                    }                    else if( _align == Align.LEFT )                    {                        entry.ty -= _bounds.height * .5 ;                    }                    else if( _align == Align.RIGHT )                    {                        entry.tx -= _bounds.width  ;                        entry.ty -= _bounds.height * .5 ;                    }                    else if( _align == Align.TOP )                    {                        entry.tx -= _bounds.width * .5 ;                    }                    else if( _align == Align.TOP_RIGHT )                    {                        entry.tx -= _bounds.width ;                    }                }            }        }    }}