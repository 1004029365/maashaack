/*  Version: MPL 1.1/GPL 2.0/LGPL 2.1   The contents of this file are subject to the Mozilla Public License Version  1.1 (the "License"); you may not use this file except in compliance with  the License. You may obtain a copy of the License at  http://www.mozilla.org/MPL/    Software distributed under the License is distributed on an "AS IS" basis,  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License  for the specific language governing rights and limitations under the  License.    The Original Code is [maashaack framework].    The Initial Developers of the Original Code are  Zwetan Kjukov <zwetan@gmail.com> and Marc Alcaraz <ekameleon@gmail.com>.  Portions created by the Initial Developers are Copyright (C) 2006-2011  the Initial Developers. All Rights Reserved.    Contributor(s):    Alternatively, the contents of this file may be used under the terms of  either the GNU General Public License Version 2 or later (the "GPL"), or  the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),  in which case the provisions of the GPL or the LGPL are applicable instead  of those above. If you wish to allow use of your version of this file only  under the terms of either the GPL or the LGPL, and not to allow others to  use your version of this file under the terms of the MPL, indicate your  decision by deleting the provisions above and replace them with the notice  and other provisions required by the LGPL or the GPL. If you do not delete  the provisions above, a recipient may use your version of this file under  the terms of any one of the MPL, the GPL or the LGPL.*/package graphics.layouts {    import core.maths.clamp;    import core.maths.replaceNaN;    import graphics.Direction;    import graphics.DirectionOrder;    import graphics.easings.expoOut;    import graphics.geom.EdgeMetrics;    import graphics.transitions.TweenTo;    import system.process.Action;    import system.signals.Signal;    import flash.display.DisplayObject;    import flash.display.DisplayObjectContainer;        /**     * This box lays out all children  in a single vertical column or a single horizontal row and can scroll all this children with a specific index value.     * <p><b>Example :</b></p>     * <pre class="prettyprint">     * import graphics.layouts.ScrollBoxLayout ;     * import graphics.layouts.LayoutBufferMode ;     *      * import graphics.geom.EdgeMetrics ;     * import graphics.Direction ;     *      * import flash.display.Graphics ;     * import flash.display.Sprite ;     * import flash.text.TextField ;     * import flash.text.TextFormat ;     *      * ////////     *      * var createChild:Function = function( i:int = 0 ):Sprite     * {     *     var child:Sprite = new Sprite() ;     *          *     child.cacheAsBitmap = true ;     *          *     child.buttonMode = true ;     *     child.useHandCursor = true ;     *          *     child.name = "child" + i ;     *          *     child.mouseChildren = false ;     *          *     child.graphics.beginFill( 0xA2A2A2, 0.4 ) ;     *     child.graphics.drawRect(0,0,200,40) ;     *          *     var field:TextField = new TextField() ;     *          *     field.defaultTextFormat = new TextFormat( "Verdana" , 12 , 0xFFFFFF ) ;     *     field.x                 = 2 ;     *     field.y                 = 4 ;     *     field.width             = child.width - 4;     *     field.height            = child.height - 8 ;     *     field.text              = "child " + (i+1) ;     *          *     child.addChild( field ) ;     *          *     return child ;     * }     *      * /////     *      * var background:Sprite = new Sprite() ;     *      * background.x = 25 ;     * background.y = 25 ;     *      * addChild( background ) ;     *      * /////     *      * var container:Sprite = new Sprite() ;     *      * container.x = 25 ;     * container.y = 25 ;     *      * addChild( container ) ;     *      * /////     *      * var update:Function = function( layout:ScrollBoxLayout ):void     * {     *     var bounds:Rectangle = layout.bounds ;     *     var canvas:Graphics = background.graphics ;     *          *     container.scrollRect = bounds ;     *          *     canvas.clear() ;     *     canvas.beginFill( 0, 0xFF0000 ) ;     *     canvas.drawRect( bounds.x , bounds.y , bounds.width , bounds.height ) ;     *      *     var area:Rectangle ;     *     var children:Vector.<DisplayObject> = layout.children ;     *          *     for each( var child:DisplayObject in children )     *     {     *         area = child.getRect(container) ;     *         if ( area.intersects(bounds) )     *         {     *             child.visible = true ;     *         }     *         else     *         {     *             child.visible = false ;     *         }     *     }     * }     *      * /////     *      * var loop:uint = 300;     *      * for( var i:int ; i<loop ; i++ )     * {     *     container.addChild( createChild( i ) ) ;     * }     *      * /////     *      * var layout:ScrollBoxLayout = new ScrollBoxLayout( container ) ;     *      * layout.updater.connect( update ) ;     *      * layout.initialize( container ) ;     *      * layout.bufferMode    = LayoutBufferMode.NORMAL ;     * layout.padding       = new EdgeMetrics(4,4,4,4) ;     * layout.childCount    = 8 ;     * layout.direction     = Direction.VERTICAL ;     * layout.horizontalGap = 4 ;     * layout.verticalGap   = 4 ;     *      * layout.run() ;     *      * /////     *      * import graphics.easings.backOut ;     * import graphics.easings.bounceOut ;     * import graphics.easings.elasticOut ;     * import graphics.easings.expoOut ;     *      * layout.easingMode = true ;     * layout.easing     = backOut ;     * layout.duration   = 1 ;     * layout.useSeconds = true ;     *      * /////     *      * function keyDown( e:KeyboardEvent ):void     * {     *     var code:uint = e.keyCode ;     *     switch( code )     *     {     *         case Keyboard.UP :     *         {     *             layout.scroll-- ;     *             break ;     *         }     *         case Keyboard.DOWN :     *         {     *             layout.scroll++ ;     *             break ;     *         }     *     }     * }     *      * stage.scaleMode = "noScale" ;     * stage.addEventListener( KeyboardEvent.KEY_DOWN , keyDown ) ;     * </pre>      */    public class ScrollBoxLayout extends BoxLayout    {        /**         * Creates a new ScrollBoxLayout instance.         * @param container The container to layout.         * @param init An object that contains properties with which to populate the newly layout object. If init is not an object, it is ignored.         */        public function ScrollBoxLayout( container:DisplayObjectContainer = null , init:Object = null )        {            super( container, init ) ;            _tween.changeIt.connect( change ) ;            _tween.finishIt.connect( finish ) ;        }                /**         * @private         */        public override function set align( value:uint ):void        {            _align  = value ;            speedScroll( fixScroll ? 1 : scroll ) ;        }                /**         * Determinates the bottom scroll value.         */        public function get bottomScroll():Number         {            return (_childCount > -1)                    ? ( ( maxscroll > 1) ? (scroll + ( _childCount - 1 ) ) : _childCount )                   : 0 ;        }                /**         * Indicates if the scroll is fixed.         */        public var fixScroll:Boolean ;                /**         * @private         */        public override function set direction(value:String):void        {            _direction = value == Direction.HORIZONTAL ? Direction.HORIZONTAL : Direction.VERTICAL ;            speedScroll( fixScroll ? 1 : scroll ) ;        }                /**         * Indicates if the easing duration of the layout.         */        public function get duration():Number        {            return _tween.duration ;        }                /**         * @private         */        public function set duration( value:Number ):void        {            _tween.duration = value ;        }                /**         * Indicates if the easing function of the layout.         */        public function get easing():Function        {            return _tween.easing ;        }                /**         * @private         */        public function set easing( func :Function ):void        {            _tween.easing = func;        }                /**         * Specifies the easing mode. If true, the layout use a motion tween to change the scroll position of all children.          */        public function get easingMode():Boolean        {            return _easingMode ;        }                /**         * @private         */        public function set easingMode( value:Boolean ):void        {            if ( value == _easingMode )            {                return ;            }            _easingMode = value ;            if( running && !_easingMode )            {                finish() ;            }        }                /**         * @private         */        public override function set horizontalGap( value:Number ):void        {            super.horizontalGap = value ;            speedScroll( fixScroll ? 1 : scroll ) ;        }                /**         * Returns the maxscroll value.         * @return the maxscroll value.         */        public function get maxscroll():Number         {            var m:int = Math.min( _children.length , _children.length - _childCount + 1 ) ;            return ( m > 1 ) ? m : 1 ;        }                /**         * @private         */        public override function set order( value:String ):void        {            super.order = value ;            speedScroll( fixScroll ? 1 : scroll ) ;        }                /**         * @private         */        public override function set padding( em:EdgeMetrics ):void        {            super.padding = em ;            speedScroll( fixScroll ? 1 : scroll ) ;        }                /**         * Returns the scroll value of this container.         * @return the scroll value of this container.         */        public function get scroll():uint         {            return _scroll ;        }                /**         * @private         */        public function set scroll( value:uint ):void         {            if( _scroll == value )            {                return ;            }            if ( maxscroll > 1 )             {                _scroll = clamp( value , 1 , maxscroll ) ;                notifyScroll() ;                run() ;            }            else             {                _scroll = 1 ;            }        }                /**         * Returns the scroller signal reference.         */        public function get scroller():Signal        {            return  _scroller ;        }                /**         * Defines if the easing used seconds or not.         */        public function get useSeconds():Boolean        {            return _tween.useSeconds ;        }                /**         * @private         */        public function set useSeconds( value:Boolean ):void        {            _tween.useSeconds = value ;        }                /**         * @private         */        public override function set verticalGap( value:Number ):void        {            super.verticalGap = value ;            speedScroll( fixScroll ? 1 : scroll ) ;        }                //////                /**         * Notify a scroll message.         */        public function notifyScroll():void         {            if ( isLocked() )             {                return ;            }            _scroller.emit( this ) ;        }                /**         * Scroll the container without scroll and without notify an event.         */        public function speedScroll( value:uint ):void         {            resetTween() ;            _modify = true ;            _scroll = ( value > 1 && maxscroll > 1) ? value : 1 ;            run() ;        }                /**         * This method is invoked when the rendering is finished to finalize the it after the measure invokation.         */        public override function update():void        {            if ( _easingMode && !_modify && _children.length > 0 )            {                const hor:Boolean = _direction == Direction.HORIZONTAL ;                const pro:String  = ( hor ? propX : propY ) ;                const inv:String  = (pro == propY) ? propX : propY ;                                const pos:uint = (_order == DirectionOrder.REVERSE) ? _children.length-1  : 0 ;                                _tween.target  = _children[pos].child;                _tween.to      = {} ;                _tween.to[pro] = _children[ pos ]["t"+pro] ;                _tween.to[inv] = _children[ pos ]["t"+inv] ;                                _tween.run() ;            }            else            {                finish() ;            }        }                /**         * @private         */        protected var _easingMode:Boolean ;                /**         * @private         */        protected var _modify:Boolean ;                /**         * @private         */        protected var _scroll:uint = 1 ;                /**         * @private         */        protected const _scroller:Signal = new Signal() ;                /**         * @private         */        protected const _tween:TweenTo = new TweenTo( null , null , expoOut , 24 ) ;                /**         * @private         */        protected override function arrange():void        {            if( _children.length > 0 )            {                const hor:Boolean = _direction == Direction.HORIZONTAL ;                const pro:String  = ( hor ? propX : propY ) ;                const tpr:String  = "t" + pro ;                const pad:Number = hor ? replaceNaN(_padding.left) : replaceNaN(_padding.top) ;                                const pos:uint = clamp( _scroll , 1 , maxscroll ) ;                                if( _order == DirectionOrder.REVERSE )                {                    _children.reverse() ;                }                                const offset:Number = _children[ --pos  ][tpr] - pad ;                                for each( var entry:LayoutEntry in _children )                {                    entry[tpr] -= offset  ;                }                                if( _order == DirectionOrder.REVERSE )                {                    _children.reverse() ;                }            }            super.arrange() ;        }                /**         * @private         */        protected function change( a:Action = null  ):void        {            const hor:Boolean  = _direction == Direction.HORIZONTAL ;            const pro:String   = hor ? propX : propY  ;            const inv:String  = (pro == propY) ? propX : propY ;            const gap:Number   = hor ? _horizontalGap : _verticalGap ;            const siz:String   = hor ? propWidth : propHeight ;                        var curr:DisplayObject ;                        if( _order == DirectionOrder.REVERSE )            {                _children.reverse() ;            }                        for each( var entry:LayoutEntry in _children )            {                if( curr )                {                    entry.child[pro] = curr[pro] + curr[siz] + gap ;                    entry.child[inv] = curr[inv] ;                }                curr = entry.child ;            }                        if( _order == DirectionOrder.REVERSE )            {                _children.reverse() ;            }            _updater.emit( this ) ;        }                /**         * @private         */        protected function finish( a:Action = null ):void        {            resetTween() ;            super.update() ;        }                /**         * @private         */        protected function resetTween():void        {            if( _modify )            {                _modify = false ;            }            if( _tween.running )            {                _tween.stop() ;            }            _tween.target = null ;            _tween.to     = null ;        }    }}