#summary how the maashaack projects are organized.

== Introduction ==

The main goal of maashaack is to not force something into you the developer<br>
but to allow you to pick what you want for your needs.

Based on this principle, most of our libraries for the framework are interchangeable,<br>
don't like our version of signals and prefer to use as3-signals, you can<br>
even us have different libraries: a full blown system.data and a lighter system.data based on core.data<br>

TODO


=== if you are a User ===

You will have mainly to deal with SWC libraries.

With the default maashaack.swc you will have everything in one file,
but you will be able to select between
 * maashaack-speedy.swc : less features, more speed of execution
 * maashaack-10.swc : optimized for Flash Player 10
 * maashaack-10-1.swc : optimized for Flash Player 10.1
 * etc.

Or you will be able to assemble different SWC depending on your needs<br>
to compose your own custom "maashaack" library.

Let's say for a SWF project you need general classes like Version and some utils to dump objects<br>
in a terminal-like interface, then you will assemble
 * system.swc
 * system.terminals.swc
 * system.serializer.eden-light.swc
 * libraries.console1.swc

Let's say for a Tamarin project you need command line utilities and classes without events<br>
then you will assemble
 * system.abc
 * system.cli.abc
 * etc.

If you really want to access the source code,<br>
you can always browse it on google code<br>
and in a near futur we will also provide a nighty zip of the sources<br>
(on a 3rd party server or maybe google code if they implement the feature first ;)).

Not now, but later we may even provide a custom tool<br>
that will allow you to select what you need in a GUI<br>
and have it compile a custom SWC/SWF/ABC for you.


=== if you are a Committer ===

You will have to use *gclient* to be able to work on the source code.

If you want to work on all the different projects fused as if it was one big project<br>
you will select the "maashaack" solution, and all the different libraries will get<br>
automatically organized in a `/src` folder.

something looking like that
{{{
maashaack
           |_ build
           |_ build.xml
           |_ DEPS
           |_ src
           |     |_ core
           |     |     |_ strings
           |     |
           |     |_ system
           |            |_ terminals
           | ...
           |_ tests
                  |_ ...
}}}

this solution can generate all the different maashaack SWCs: maashaack-speedy.swc , maashaack-10.swc, etc.

If you want to work on the different projects as independent projects<br>
you will select the "maashaackSA" solution (SA = !StandAlone)<br>
and all the projects will get automatically organized in groups: packages, libraries, tools, etc.<br>
and then the respective project name, and then their own `/src` directory.

something looking like that
{{{
maashaackSA
           |_ build
           |_ build.xml
           |_ DEPS
           |_ libraries
           |     |_ astuce
           |     |        |_ build
           |     |        |_ build.xml
           |     |        |_ src
           |     |        |     |_ ...
           |     |        |
           |     |        |_ tests
           |     |              |_ ...
           |     |
           |     |_ v8benchmark
           |
           |_ packages
           |      |_ core
           |     |        |_ build
           |     |        |_ build.xml
           |     |        |_ src
           |     |        |     |_ ...
           |     |        |
           |     |        |_ tests
           |     |              |_ ...
           |     |_ system
           |     |        |_ build
           |     |        |_ build.xml
           |     |        |_ src
           |     |        |     |_ ...
           |     |        |
           |     |        |_ tests
           |     |              |_ ...
           |     |_ system_terminals
           |     |        |_ build
           |     |        |_ build.xml
           |     |        |_ src
           |     |        |     |_ ...
           |     |        |
           |     |        |_ tests
           |     |              |_ ...
           | ...
}}}

this solution can generate all the independent libraries: core.swc, system.swc, system.terminals.swc, etc.


== Details ==

TODO

=== Definitions ===

A *Solution* is a root configuration to be used with *gclient*<br>
you can find the different solutions available in `/svn/configs`.

A *Project* is an independent *Package*, *Library* or *Tool*<br>
you can find them respectively in `/svn/packages`, `/svn/libraries` and `/svn/tools`.

A *Package* is an AS3 package that fit in one of the root packages as *core*, *system*, etc.<br>
those sources are considered of general use and part of a global application framework.

A *Library* is an AS3 library that fit in the package *library*<br>
those source are considered as 3rd party or specific utilities,<br>
for example:<br>
the zlib library can be found in the *library.zlib* package<br>
and will generate *library.zlib.swc*.

A *Tool* is an AS3 based application that live in its own package (and sometime its own repository)<br>
it can be a Tamarin or an AIR project (or anything else),<br>
for example:<br>
the makeSWC command line tool can be found in the `/svn/tools/makeswc` directory<br>
the package could be something like *tamarin.makeswc*<br>
and could generate *makeswc.exe* (windows) , *makeswc* (OS X) and *makeswc.bin* (Linux).


TODO


=== Directories and Project setup ===

TODO

=== Add your Project to maashaack ===

One of our main goal is to try to define a standard unified library for AS3,<br>
if you think alike and want to be friend with maashaack, here one way to do it<br>
 * contact us (yes we can help)
 * apply the directories and project setup to your own project
 * follow the packages organization, if you have a RAR library for ex, define it in *library.rarlib* instead of *com.joe.util.RAR*
 * and just contact us again so we sync with your project

with that, next time the maashaack sources are compiled,<br>
even if you project reside in an external repository,<br>
your particular library *library.rarlib* will be compiled<br>
and distributed as *library.rarlib.swc* among the other libraries.

Our idea is that it is simpler for the AS3 developers in general<br>
to look for libraries in a `library.*` and keep the whole thing clean and organized.

Also as a community we think it would help to reach a certain maturity,<br>
like Perl or Python for example, but we're not there yet.

TODO
 

=== Custom Solution ===

TODO