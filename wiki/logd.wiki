#summary logd library.

== Introduction ==

*logd* is a logging library implemented in the spirit of the *core* package,<br>
small, fast and without any dependencies.

Today in AS3 you must have about 100's of different logging libraries,<br>
people kind of followed what happened with Java<br>
(Log4J, Jakarta Commons-Logging, SLF4J, java.util.logging, etc.).

No seriously, search google code for "as3 logging" and [http://code.google.com/hosting/search?q=as3+logging see for yourself].

One thing for sure is that to log information is something useful,<br>
but because there are so many different logging implementations in AS3<br>
you don't want to impose the use of one particular logging library (simply because you use it in your code).

In the *maashaack framework* there is a fairly complete logging library *system.logging*<br>
you can browse the code here [http://code.google.com/p/maashaack/source/browse/#svn%2Ftrunk%2FAS3%2Fsrc%2Fsystem%2Flogging /trunk/AS3/src/system/logging]

But this *system.logging* is more something that someone would use in his/her application code,<br>
and something we try to not use in the lower layers of packages,libraries etc.


== Details ==

*logd* focus on 3 points
 * being as small and fast as possible
 * being customisable so you can hook it with any other logging library
 * being completely removable with ConditionalCompilation

Also *logd* has been largely inspired by [http://developer.android.com/reference/android/util/Log.html android.util.Log].

You could resume *logd* as a wrapper around `trace()` that connect its input/output to other loggers.

here the API
{{{
package core
{
    public interface Logger
    {
        function get SUPPRESS():int;
        function get VERBOSE():int;
        function get DEBUG():int;
        function get INFO():int;
        function get WARN():int;
        function get ERROR():int;
        function get ASSERT():int;
        
        function get id():String;

        function get level():int;
        function set level( value:int ):void;
        
        function get input():Function;
        function set input( value:Function ):void;
        
        function get output():Function;
        function set output( value:Function ):void;

        function config( cfg:Object ):void;

        function format( priority:int, pre:String = "", post:String = "" ):void;

        function tag( name:String, level:int = -1 ):Logger;

        function v( msg:String, o:* = null ):void;
        function d( msg:String, o:* = null ):void;
        function i( msg:String, o:* = null ):void;
        function w( msg:String, o:* = null ):void;
        function e( msg:String, o:* = null ):void;
        function wtf( msg:String, o:* = null ):void;

        function println( priority:int, tag:String, msg:String, o:* = null ):void;        
    }
}
}}}

*logd* can use 4 different mode

*raw* for text file<br>
`ID | PRIORITY LETTER | TAG | MESSAGE | TIME`
 * *ID* is a random hex of 8 chars
 * *PRIORITY LETTER*
    * *V* for verbose
    * *D* for debug
    * *I* for info
    * *W* for warn
    * *E* for error
    * *WTF* for a fatal error
 * *TAG* a custom tag or the empty string by default
 * *MESSAGE* the log message
 * *TIME* timestamp in milliseconds

*clean* for console output<br>
`TAG | PRE | MESSAGE | POST | TIME`
 * *TAG* a custom tag or the empty string by default
 * *PRE* pre priority format
 * *MESSAGE* the log message
 * *POST* post priority format
 * *TIME* timestamp in milliseconds

*data* for advanced custom output<br>
there is not a formated output, but a data structure meant<br>
to be formated by your own custom output function
{{{
obj
{
    id: "17AC06D37",
    priority: 4,
    letter: "I",
    pre: "( ",
    post: " )",
    tag: "",
    time: 63,
    sep: "|",
    o: null
}
}}}
 * *id* (string): session id
 * *priority* (int): priority number
 * *letter* (string): priority letter
 * *pre* (string): pre priority format
 * *post* (string): post priority format
 * *tag* (string): custom tag
 * *time* (uint): timestamp
 * *sep* (string): separator
 * *o*: custom object

*short* for text field<br>
`MESSAGE`
and nothing else unless you customize the input/output.


=== basic usage ===

import and log and that's it.
{{{
package test
{
    import core.log;

    public class MyClass
    {
        public function MyClass()
        {
            log.i( "constructor" );
        }

        public function toString():String
        {
            log.i( "toString" );
            return "MyClass";
        }
    }
}

//output (by default with trace() and flashlogs.txt
17AC06D37|I||constructor|64
17AC06D37|I||toString|65
}}}

This format is the *raw* mode, when you mainly target a text file to store your logs.

the `17AC06D37` is the id for the logging session and is here only to be able to<br>
filter the logs from a big text file (like `flashlogs.txt`) and get the particular session.


Adding a custom tag.
{{{
package test
{
    import core.log;
    import core.Logger;

    public class MyClass
    {
        private var _log:Logger;

        public function MyClass()
        {
            _log = log.tag( "MyClass" );
            _log.i( "constructor" );
        }

        public function toString():String
        {
            _log.i( "toString" );
            return "MyClass";
        }
    }
}

//output
17AC06D37|I|MyClass|constructor|64
17AC06D37|I|MyClass|toString|65
}}}

Change the mode and the separator.
{{{
package test
{
    import core.log;
    import core.Logger;

    public class MyClass
    {
        private var _log:Logger;

        public function MyClass()
        {
            _log = log.tag( "MyClass" );
            _log.config( { mode: "clean", sep: " " } );
            _log.i( "constructor" );
        }

        public function toString():String
        {
            _log.i( "toString" );
            return "MyClass";
        }
    }
}

//output
MyClass ( constructor ) 64
MyClass ( toString ) 65
}}}


Change the format for a particular priority and change the logging level (and all of the above).
{{{
package test
{
    import core.Logger;
    import core.log;
    
    public class MyClass
    {
        private var _log:Logger;
        
        public function MyClass()
        {
            _log = log.tag( "MyClass" );
            _log.level = log.VERBOSE;
            _log.config( { mode: "clean", sep: " " } );
            _log.format( log.DEBUG, "|---------> ", "" );
            _log.i( "constructor" );
        }
        
        public function test():void
        {
            _log.d( "test" );
        }
        
        public function toString():String
        {
            _log.i( "toString" );
            return "MyClass";
        }
    }
}
//output
MyClass ( constructor ) 64
MyClass |---------> test 65
MyClass ( toString ) 65
}}}