#summary how to organize the structure of a project.

== Introduction ==

Here are the basic rules to organize a project  directories, build, different setups, etc.

The goal is to have the same structure for each projects to automate builds globally.

== Directories =

{{{
$ROOT = one of the roots (packages,libraries,tools,platform,etc.)
$NAME = the project name
}}}

{{{
$ROOT
  |_ $NAME
      |_ branches
      |_ tags
      |_ trunk
}}}

{{{
...
  |_ trunk
      |_ bin
      |_ bin-debug
      |_ build
      |_ docs
      |  |_ $NAME
      |  |_ ...
      |     
      |_ examples      -> examples files (*.fla, *.as, *.mxml, etc.)
      |_ gfx                 -> all binary resource files
        |     |_ fla           -> *.fla
        |     |_ img         -> *.png, *.gif, *.jpg
        |     |_ psd         -> *.psd
        |     |_ ai            -> *.ai
        |     |_ 3D          -> *.3ds, *.obj, etc.
        |     |_ ico
        |     |_ etc.
        |
        |_ lib                 -> source code libraries (*.as)
        |_ lib-swc        -> compiled libraries (*.swc)
        |_ src                -> the source code of the current project NAME
        |_ templates    -> templates base files to be used by the build
        |_ tests             -> general tests and unit tests

}}}

 * *bin* files generated by the build
 * *bin-debug* files from your manual/local build
 * *build* configuration and libraries of the automated build
 * *docs* general documentation files
    * *$NAME* HTML documentation generated by asdoc
    * other files (image, UML, etc. ) related to the documentation